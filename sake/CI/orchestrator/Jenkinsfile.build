
pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:24.0.2
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  - name: python
    image: python:3.11-slim
    command:
    - cat
    tty: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }
    parameters {
        string(name: 'GITHUB_BRANCH', defaultValue: 'main', description: 'Git branch to checkout')
    }
    environment {
        DOCKER_IMAGE = 'killiankopp/sake-orchestrator'
    }
    stages {
        stage('Retrieve Version') {
            steps {
                script {
                    env.DOCKER_TAG = sh(
                        script: "curl -s https://raw.githubusercontent.com/karned-formation/SEP24-MLOPS-SAKE-OPS/main/sake/CI/orchestrator/version",
                        returnStdout: true
                    ).trim()
                }
                echo "Version récupérée : ${env.DOCKER_TAG}"
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: "${params.GITHUB_BRANCH}", url: 'https://github.com/karned-formation/SEP24-MLOPS-SAKE.git'
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh 'apt-get update && apt-get install -y python3 python3-pip'
                    sh 'python3 -m venv venv'
                    sh './venv/bin/activate'
                    sh 'pip install -r requirements.txt'
                    try {
                        sh './venv/bin/pytest --cov=src tests/'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        echo "Erreur lors de l'exécution des tests : ${e}"
                        throw e
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    sh """
                    cd docker/orchestrator
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                container('docker') {
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKERHUB_USR', passwordVariable: 'DOCKERHUB_PSW')]) {
                        sh """
                        echo $DOCKERHUB_PSW | docker login -u $DOCKERHUB_USR --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }
    }
}
